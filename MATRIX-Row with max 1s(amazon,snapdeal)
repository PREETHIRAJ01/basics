Given a boolean 2D array where each row is sorted. Find the row with the maximum number of 1s.

Input:
The first line of input contains an integer T denoting the number of test cases.
The first line of each test case contains n and m, where n is the number of rows and m is the number of columns. 
The second line of each test case contains the array elements.

Output:
Print the row with the maximum number of 1s.

Constraints:
1 ≤ T ≤ 50
1 ≤ n,m ≤ 103

Example:
Input:
2
4 4
0 1 1 1 0 0 1 1 1 1 1 1 0 0 0 0
2 2
0 0 1 1

Output:
2
1

Explanation :
Testcase 1 : Row 2 is having maximum number of 1s (0-based indexing).



code:
#include<stdio.h>

int main()
{
    int t;
    scanf("%d",&t);
    int n,m,i,j;
    while(t--)
    {
        scanf("%d%d",&n,&m);
        int a[n][m];
        int count=0,max=0,row,flag=0;
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                scanf("%d",&a[i][j]);
            }
        }
        for(i=0;i<n;i++)
        {
            
            for(j=0;j<m;j++)
            {
                if(a[i][j]==1)
                {
                    count++;
                }
            }
            if(count>max)
            {
                max=count;
                row=i;
                flag=1;
            }
            else if(count==max)
            {
                max=count;
                flag=1;
                if(i<row)
                {
                    row=i;
                }
                
            }
           
            count=0;
        }
        
       if(flag==0)
        printf("-1\n");
        else 
        printf("%d\n",row);
        
        
        
    }
}
