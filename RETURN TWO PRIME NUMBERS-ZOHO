Given an even number (greater than 2), return two prime numbers whose sum will be equal to given number. 
There are several combinations possible. Print only first such pair. 

NOTE: A solution will always exist, read Goldbach’s conjecture. Also, solve the problem in linear time complexity, i.e., O(n).

Input:
The first line contains T, the number of test cases.
The following T lines consist of a number each, for which we'll find two prime numbers.

Note: The number would always be an even number.

Output:
For every test case print two prime numbers space separated, such that the smaller number appears first. 
Answer for each test case must be in a new line.

Constraints:
1 ≤ T ≤ 70
1 ≤ N ≤ 10000

Example:
Input:
5
74
1024
66 
8
9990

Output:
3 71
3 1021
5 61
3 5
17 9973

 
code:(execution time 0.01)
I USED SIEVE OF ERATOSTHENES CONCEPT HERE
#include <stdio.h>

int main()
{
	long long int t;
	scanf("%lld",&t);
	long long int n,i,j,f,b,flag=0;
	while(t--)
	{
	    scanf("%lld",&n);
	    int a[n];
	    for(i=2;i<=n;i++)
	    {
	        a[i]=1;
	    }
	    for(i=2;i<=n;i++)
	    {
	        for(j=i;i*j<=n;j++)
	        {
	            a[i*j]=0;
	        }
	    }
	    for(f=2;f<=n/2;f++)
	    {
	        flag=0;
	        for(b=n;b>=n/2;b--)
	        {
	        if(a[f]==1 && a[b]==1 &&(f+b==n))
	        {
	        printf("%lld %lld\n",f,b);
	        flag=1;
	        break;
	        }
	        }
	        if(flag==1)
	        {
	         break;
	        }
	    }
	    
	}
	return 0;
}



CODE USING FUNCTIONS:
#define max 100000
int isPrime(int a)
{
    int i,count=0;
    if(a == 2)
    {
        return 1;
    }
    else
    {
        for(i=1;i<=(a/2);i++)
        {
            if(a%i == 0)
            {
                count++;
            }
        }
        if(count == 1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}

void checkSum(int a)
{
    int i=2,j=a-2;
    while(1)
    {
        if(isPrime(i)&&isPrime(j))
        {
            printf("%d %d\n",i,j);
            break;
        }
        else
        {
            i++;
            j--;
        }
    }
}
int main()
{
	int i,t,en[max];
	scanf("%d",&t);
	for(i=0;i<t;i++)
	{
	    scanf("%d",&en[i]);
	}
	for(i=0;i<t;i++)
	{
	    checkSum(en[i]);
	}
	
	return 0;
}


SIMPLEST BEAUTIFUL CODE:
#include<bits/stdc++.h>
using namespace std;
bool isPrime(int n)
{
    if(n<=1)return 0;
    for(int i=2;i*i<=n;i++)
    {
        if(n%i==0)return 0;
    }
    return 1;
}
int main()
 {
	int n,t;
	cin>>t;
	while(t--)
	{
	    cin>>n;
	    for(int i=2;i<n;i++)
	    {
	        if(isPrime(i)==1 && isPrime(n-i)==1) // SIMPLE MATHS 2+3=5 HERE N=5 WHEN I=2 ,N-I=5-2=3 ,IF BOTH AREPRIME SO ITS PRINTED 
	          {cout<<i<<" "<<(n-i)<<endl;break;}
	    }
	}
	
	return 0;
}
