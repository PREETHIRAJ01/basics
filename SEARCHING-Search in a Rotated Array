Given a sorted and rotated array A of N distinct elements which is rotated at some point, and given an element K. The task is to find the index of the given element K in the array A.

Input:
The first line of the input contains an integer T, denoting the total number of test cases. Then T test cases follow. Each test case consists of three lines. First line of each test case contains an integer N denoting the size of the given array. Second line of each test case contains N space separated integers denoting the elements of the array A. Third line of each test case contains an integer K denoting the element to be searched in the array.

Output:
Corresponding to each test case, output the index of the element found in the array.  If element is not present, then output -1.

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 107
0 ≤ Ai ≤ 108
1 ≤ K ≤ 108

Example:
Input:
3
9
5 6 7 8 9 10 1 2 3
10
3
3 1 2
1
4
3 5 1 2
6

Output:
5
1
-1

Explanation:
Testcase 1: 10 is found at index 5.





code:
#include <stdio.h>

int main()
{
	int t;
	scanf("%d",&t);
	int n;
	while(t--)
	{
	    scanf("%d",&n);
	    int a[n],k,i,flag=0;
	    for(i=0;i<n;i++)
	    {
	        scanf("%d",&a[i]);
	    }
	    scanf("%d",&k);
	    for(i=0;i<n;i++)
	    {
	        if(a[i]==k)
	        {
	            printf("%d\n",i);
	            flag=1;
	            break;
	            
	        }
	    }
	    if(flag==0)
	    {
	        printf("-1\n");
	    }
	    
	}
	return 0;
}



OR
#include<bits/stdc++.h>

using namespace std;

long long a[10000000];
int main(){

    long long t;
    cin >> t;

    while(t--){
        long long n;
        cin >> n;

        for(long long i =0;i<n;i++){ 
            cin >> a[i];
        }
        long long num;
        cin >> num;

        long long low = 0, high = n-1, ans = -1;
        while(low <= high){
            long long mid = (low+high)/2;
            if(num == a[mid]){
                ans = mid;
                break;
            }

            if(a[low] <= a[mid]){
                if(a[low] <= num && num <= a[mid]){
                    high = mid-1;
                }
                else{
                    low = mid+1;
                }
            }
            else{
                if(a[mid] < a[high]){
                    if(a[mid] <= num && num <= a[high]){
                        low = mid+1;
                    }
                    else{
                        high = mid-1;
                    }
                }
            }
        }
        cout << ans << endl;
    }
}
  
