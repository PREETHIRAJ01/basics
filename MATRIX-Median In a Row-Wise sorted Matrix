
We are given a row wise sorted matrix of size r*c, 
we need to find the median of the matrix given. 
It is assumed that r*c is always odd.

Input:
The first line of input contains an integer T denoting the number of test cases.
Each test case contains two integers r and c, where r is the number of rows and c is the number of columns in the array a[]. 
Next r line contains space separated c elements each in the array a[].â€‹

Output:
Print an integer which is the median of the matrix.

Constraints:
1<= T <=100
1<= r,c <=150
1<= a[i][j] <=1000

Example:
Input:
1
3 3
1 3 5
2 6 9
3 6 9

Output:
5




hint:
What is the Median?
The median is the middle number in a sorted, ascending or descending,
list of numbers and can be more descriptive of that data set than the average.


KEY TAKEAWAYS
The median is the middle number in a sorted, ascending or descending,
list of numbers and can be more descriptive of that data set than the average.
The median is sometimes used as opposed to the mean when there are outliers in the sequence that might skew 
the average of the values.
If there is an odd amount of numbers, the median value is the number that is in the middle, 
with the same amount of numbers below and above.
If there is an even amount of numbers in the list, the middle pair must be determined, added together, 
and divided by two to find the median value.



1.sort the array
2.find the middle number since r*c is always odd number

code:
#include<stdio.h>

void merge(int arr[], int l, int m, int r) 
{ 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
  
    /* create temp arrays */
    int L[n1], R[n2]; 
  
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++) 
        L[i] = arr[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = arr[m + 1+ j]; 
  
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
  
    /* Copy the remaining elements of L[], if there 
       are any */
    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i++; 
        k++; 
    } 
  
    /* Copy the remaining elements of R[], if there 
       are any */
    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j++; 
        k++; 
    } 
} 
  
/* l is for left index and r is right index of the 
   sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r) 
{ 
    if (l < r) 
    { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int m = l+(r-l)/2; 
  
        // Sort first and second halves 
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
} 
  

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int r,c;
        scanf("%d%d",&r,&c);
        int i,j;
        int b[r*c],k=r*c;
        for(i=0;i<r*c;i++)
        {
           scanf("%d",&b[i]);
        }
        mergeSort(b,0,k-1);
        printf("%d\n",b[(k/2)]);
    }
}
