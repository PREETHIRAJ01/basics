Message Encryption 
To encrypt messages Jil will first decide on the number of columns C to use.
Then Jil will pad the message with letters chosen randomly so that they form a rectangular matrix. 
Finally Jil will write down the message navigating the rows from left to right and then from right to left.
The program must accept the encrypted message M as input and then extract and print the original message 
(along with any additional padding letters) from the encrypted one based on the value of C.
Boundary Conditions:Length of M is from 4 to 200.
2 <= C <= 20
Input Format:First line will contain the string value of the encrypted message M.
Second line will contain the integer value of the column used for the encryption.
Output Format:First line will contain the string value of the original message (along with any additional padding letters)
Sample Input/Output:Example 1:
Input:midinadiazne3
Output:madeinindiaz
Explanation:
m i d
a n i
d i a
e n z
Here z is the padding letter.
The navigating across the rows mid (left to right) ina (right to left) and so on we come up with the encrypted message midinadiazne.
Example 2:Input:
loaesfbnaiordilertenrdhdw5
Output:lionroaredandthebirdsflew
Explanation:
l o a e s
i a n b f
o r d i l
n e t r e
r d h d wHere there are no padding letters.
The navigating across the rows left to right and then from right to left we get loaesfbnaiordilertenrdhdw



code:
#include<stdio.h>
#include <stdlib.h>
int main()
{ 
    char s[200];
    scanf("%s",s); 
    int n; 
    scanf("%d",&n);
    int l=strlen(s);
    int rows=l/n,cols;
     cols=n;
    char temp[rows][100]; 
    int i,j; int k=0; 
    for(i=1;i<=rows;i++)
    { 
        if(i%2!=0) 
        { 
            for(int j=1;j<=cols;j++) 
            { 
                temp[i-1][j-1]=s[k];
                k++;
                
            }
            }
            if(i%2==0)
            { 
                for(int j=cols;j>=1;j--) 
            { 
                temp[i-1][j-1]=s[k];
                k++;
            } 
                
            } 
        
    } 
    for(i=0;i<cols;i++)
    { 
        for(j=0;j<rows;j++) 
        { 
            printf("%c ",temp[j][i]); 
            
        } 
        
    }
