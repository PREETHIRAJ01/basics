A string S is passed as the input. 
Two words W1 and W2 which are present in the string S are also passed as the input. 
The program must find the minimum distance D between W1 and W2 in S (in forward or reverse order)
and print D as the output.Input Format:The first line will contain S.The second line will contain W1.
The third line will contain W2.Output Format:The first line will contain D - the minimum distance between W1 and W2 in S.
Boundary Conditions:Length of S is from 5 to 200.
Example Input/Output 1:
Input:the brown quick frog quick thethequick
Output:
1
Explanation:quick and the are adjacent as the last two words.
Hence distance between them is 1.
Example Input/Output 2:Input:
the quick the brown quick brown the frogquickfrog
Output:
3
Example Input/Output 3:Input:
THere is no time like today and we hope it is the first of many many many times coming here
many 
many
output:
1



Max Execution Time Limit: 5000 millisecs




code:
#include<stdio.h>
#include <stdlib.h>
int main()
{
   
char s[200]; 
scanf("%[^\n]s",s);
 char s1[200],s2[200]; 
scanf("%s\t%s",s1,s2); 
char t[5][200]; 
int i,j=0,k=0; 
for(i=0;i<strlen(s);i++)
{
    if((s[i]>='a' && s[i]<='z') || (s[i]>='A' && s[i]<='Z') || (s[i]>='0' && s[i]<='9') )
    { 
        t[j][k++]=s[i]; 
        
    } 
    t[j][k]='\0'; 
    if(s[i]==' ' && ((s[i+1]>='a' && s[i+1]<='z') || (s[i+1]>='A' && s[i+1]<='Z')|| (s[i+1]>='0' && s[i+1]<='9')))
    {
        t[j++][k];
        k=0;
        } 
    
} 
int n1=0,n2=0,min=j; 
for(i=0;i<=j;i++)
{ 
       if(strcmp(t[i],s1)==0 && strcmp(t[i+1],s2)==0)// this if is useful if the given s1 and s2 are same 
        {
        n1=i; 
        n2=i+1;
        //printf("n1-%d ",n1);
        }
          else if(strcmp(t[i],s1)==0) 
        {
            n1=i;
            //printf("n2-%d ",n1);
            
            
        }
        else if(strcmp(t[i],s2)==0) 
        {
            n2=i;
            //printf("n2-%d ",n2);
            
            
        }
        if(n1!=n2)
        {
        if((n1!=0 && n2!=0) && (n1!=n2)&& (abs(n1-n2)<=min))
       { 
           min=abs(n1-n2);
           //printf("min-%d ",min);
       } 
        }
    
} printf("%d",min); }




skilrack solution:
#include <stdio.h>
int main()
{char input[200];
fgets(input,200,stdin);
char *ptr = input;
int offset=0;
int wordcount=0;
char currentword[100];
//Count the number of words.
while(sscanf(ptr,"%s%n",currentword,&offset) == 1)
{wordcount++;ptr+=offset;
}/*Declare an array to hold the words. Max length of a word is assumed to be the max length of the input string. */c
har words[wordcount][200];
int index=0;
ptr = input;
while(sscanf(ptr,"%s%n",currentword,&offset) == 1) 
{
strcpy(words[index],currentword);
ptr+=offset;index++;}
//Now accept the wordschar word1[200];
char word2[200];
scanf("%s",word1);
scanf("%s",word2);
int minDistance = -1;
index = 0;
while(index < wordcount)
{
if(strcmp(words[index],word1) == 0)
{
int word2index=index+1;
while(word2index < wordcount)
{
if(strcmp(words[word2index],word2) == 0)
{
int currentDistance = word2index-index;
if(minDistance == -1 || currentDistance < minDistance) 
{
minDistance = currentDistance;
}
}
word2index++;}} 
else if(strcmp(words[index],word2) == 0)
{int word1index=index+1;while(word1index < wordcount) {if(strcmp(words[word1index],word1) == 0) 
{int currentDistance = word1index-index;if(minDistance == -1 || currentDistance < minDistance)
{minDistance = currentDistance;}}word1index++;}}//Go to the next wordindex++;}printf("%d",minDistance);}
