Given two numbers A and B. The task is to find out their LCM and GCD.

Input:
The first line of input contains an integer T denoting the number of testcases.
T testcases follow. In each test cases, there are two numbers A and B separated by space.

Output:
For each testcase in a new line, print LCM and GCD separated by space.

Constraints:
1 <= T <= 104
1 <= A <= 108
1 <= B <= 108

Example:
Input:
2
5 10
14 8

Output:
10 5
56 2

Explanation:
Testcase 1: LCM and GCD of given numbers 5 and 10 are: 10 and 5.
 


#include <stdio.h>

int main(void)
{
    long long int t;
    scanf("%lld",&t);
    long long int a,b,lcm;
    while(t--)
    {
    scanf("%lld%lld",&a,&b);
    long long int n1=a,n2=b;
    while(a!=b)
    {
        if(a>b)
        a=a-b;
        else
        b=b-a;
    }
    lcm=(n1*n2)/a;
    printf("%lld %lld\n",lcm,a);
    }
}
with recursion:
long long int gcd(long long int ,long long int);
long long int lcm(long long int ,long long int);

int main() {
     long long int t;
     scanf("%lld",&t);
     while(t--)
     {
         long long int a,b,p,q;
         scanf("%lld %lld",&a,&b);
         p=gcd(a,b);
         q=lcm(a,b);
         printf("%lld %lld\n",q,p);
     }
	return 0;
}
long long int gcd(long long int a,long long int b)
{
    if(a==b)
    return a;
    if(a>b)
    return gcd(a-b,b);
    return gcd(a,b-a);
}
long long int lcm(long long int a,long long int b)
{
  long long int s;
  s=(a*b)/gcd(a,b);
    
    return s;
}


code3:
THIS GIVES FLOATING POINT EXCEPTION IN GEEKS FOR GEEKS COMPILER BUT GIVES OUTPUT IN NORMAL COMPILERS
#include <stdio.h>
int main(void)
{
    int a=3,b=5;
    int n1=a,n2=b,temp,t;
    while(b!=0)
    {
        if(b==0)
        return a;
      else if(a<b)
       {
        temp=a;
        a=b;
        b=temp;
       }
       else
        t=b;
        b=a%b;
        a=t;
       
       
    }
    
    printf("%d",a);
}
