Given a matrix mat[] of size n x m, where every row and column is sorted in increasing order,
and a number x is given. The task is to find whether element x is present in the matrix or not.

Expected Time Complexity : O(m + n)

Input:
The first line of input contains a single integer T denoting the number of test cases. 
Then T test cases follow. Each test case consists of three lines. First line of each test case 
consist of two space separated integers N and M, denoting the number of element in a row and column respectively. 
Second line of each test case consists of N*M space separated integers denoting the elements in the matrix in row major order.
Third line of each test case contains a single integer x, the element to be searched.

Output:
Corresponding to each test case, print in a new line, 1 if the element x is present in the matrix, otherwise simply print 0.

Constraints:
1 <= T <= 200
1 <= N, M <= 30
1 <= mat[][] <= 100
1<= X <= 100
Example:
Input:
2
3 3
3 30 38 44 52 54 57 60 69
62
1 6
18 21 27 38 55 67
55

Output:
0
1

Explanation:
Testcase 1: 62 is not present in the matrix, so output is 0.
Testcase 2: 55 is present in the matrix at 5th cell.


CODE:
#include<stdio.h>

int main()
{
    int t;
    scanf("%d",&t);
    int n,m;
    while(t--)
    {
        scanf("%d%d",&n,&m);
        int a[n][m],i,j,x,flag=0;
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                scanf("%d",&a[i][j]);
            }
        }
        scanf("%d",&x);
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                if(a[i][j]==x)
                {
                    flag=1;
                    printf("1\n");
                    break;
                }
            }
            if(flag==1)
            break;
        }
        if(flag==0)
        printf("0\n");
        
    }
}



c++;(solution from geeks for geeks
#include <bits/stdc++.h>
using namespace std;
int mat[30][30];
int search( int n,int m, int x)
{
   int i = 0, j = m-1;  //set indexes for top right element
   while ( i < n && j >= 0 )
   {
      if ( mat[i][j] == x )
      {
         printf("1\n");
         return 1;
      }
      if ( mat[i][j] > x )
        j--;
      else //  if mat[i][j] < x
        i++;
   }
 
   printf("0\n");
   return 0;  // if ( i==n || j== -1 )
}
 
int main()
{
  int t;
  cin>>t;
  while (t--)
  {
      int n,m,x,i,j;
      cin>>n>>m;
     
      for(i=0;i<n;i++){
      for(j=0;j<m;j++)
      cin>>mat[i][j];}
       cin>>x;
      search(n,m,x);
  }
  return 0;
}

java:
import java.util.*;
import java.io.*;
import java.lang.*;

class gfg
{
    static int mat[][] = new int[30][30];
    static int  search(int n, int m, int x)
    {
        int i = 0, j = m-1; //set indexes for top right element
        
        
        while ( i < n && j >= 0 )
        {
            if( mat[i][j] == x )
            {
                System.out.println(1);
                return 1;
            }
            if(mat[i][j] > x)
                j--;
            else            //  if mat[i][j] < x
                i++;
        }
 
       System.out.println(0);
       return 0;  // if ( i==n || j== -1 )
    }
    
    
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n = sc.nextInt();
            int m = sc.nextInt();
            
            
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < m; j++)
                  mat[i][j] = sc.nextInt();
            }
            
            int x = sc.nextInt();
            
            search(n, m, x);
        }
        
    }
}

