code 1:(without optimization)

CONSIDER 10000 WHICH IS 16 IN DECIMAL
2^4 IS 16
HERE FOR 16--->BINARY
               4 3 2 1 0
               1 0 0 0 0
I AM USING  COUNT TO GET THE BIT POSITION TO MAKE IT TO BE THE POWER OF 2
1. IN FIRST FIRST IF I AM CHECKING WHETHER R IS EQUAL TO 1
IF IT IS AM DOING 2^COUNT

2. IN SECOND IF IAM CHECKING WHETHER R IS EQUAL TO 0
IF IT IS AM JUST IGNORING AND CONTINUING BY GOING AGAIN TO TOP OF THE LOOP
                       



#include <stdio.h>
#include<math.h>

int main() 
{
	int t;
	scanf("%d",&t);
	int sum=0,count=0,n,r;
	while(t--)
	{
	    scanf("%d",&n);
	    while(n!=0)
	    {
	        r=n%10;
	        if(r==1)
	        {
	        sum=sum+pow(2,count);
	        count++;
	        n=n/10;
	        }
	        if(r==0)
	        {
	        n=n/10;
	        count++;
	        continue;
	        }
	        
	        
	    }
	    printf("%d\n",sum);
	    sum=0;
	    count=0;
	    
	    
	}
	return 0;
}


code2:(with optimization)

EXPLANATION:
LET US TAKE AN EXAMPLE N=10000
UNTILE N IS 0 SECOND WHILE LOOP RUNS
1. R=0              2.R=0            3. R=0           4.R=0            5=R=1
   D=0+0*1           D=0+0*2         D=0+0*4         D=0+0*8          D=0+1*16
   N=1000            N=100           N=10            N=1              N=0
   BASE=1*2=2       BASE=2*2=4     BASE=4*2=8        BASE=8*2=16      Base=16*2=32
 LOOP TERMINATES BECAUSE N IS 0

#include <stdio.h>
#include<math.h>

int main() 
{
	 long long int t;
	scanf("%lld",&t);
	long long int d=0,base=1,n,r;
	while(t--)
	{
	    scanf("%lld",&n);
	    while(n!=0)
	    {
	        r=n%10;
	        d=d+r*base;
	        n=n/10;
	        base=base*2;
	        
	        
	    }
	    printf("%lld\n",d);
	    d=0;
	    base=1;
	    
	}
	return 0;
}
