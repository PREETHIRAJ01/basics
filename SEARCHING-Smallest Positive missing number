You are given an array arr[] of N integers including 0. The task is to find the smallest positive number missing from the array.
Note: Expected solution in O(n) time using constant extra space.

Input:
First line consists of T test cases. First line of every test case consists of N, 
denoting the number of elements in array. Second line of every test case consists of elements in array.

Output:
Single line output, print the smallest positive number missing.

Constraints:
1 <= T <= 100
1 <= N <= 106
-106 <= arr[i] <= 106

Example:
Input:
2
5
1 2 3 4 5
5
0 -10 1 3 -20
Output:
6
2

Explanation:
Testcase 1: Smallest positive missing number is 6.
Testcase 2: Smallest positive missing number is 2.
 


code:

with constant space:
1.i am creating frequency array and while inputting numbers ,i am checking the positive number and the numbers which are positive are
taken into account and its frequency is stored in a[] array one by one
2. now am running the loop from 1 to n+1
    because the smallest positive number will be between (1- n-1)
    eg:
    5
    1 2 3 4 5--->output 6 (which is n+1)
    5
    0 -10 -1 1 3--->output 2({1,3} missing number is 2)






#include <stdio.h>


    

int main() 
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n; 
        scanf("%d",&n);
        int a[1000000]={0};
        int i,j,key,index,x;
        for(i=1;i<=n;i++)
        {
            scanf("%d",&x);
            if(x>0)
            {
            a[x]++;
            
            }
            
        }
        
        for(i=1;i<=(n+1);i++)
        {
            if(a[i]==0)
            {
                printf("%d",i);
                break;
            }
            
        }
        printf("\n");
    }
	return 0;
}
ANOTHER:
#include <stdlib.h>
int main() {
	int t,n,k,i;
	scanf("%d",&t);
	while(t--){
	    scanf("%d",&n);
	    int *arr = (int*)calloc(sizeof(int),n);
	    for(i=0;i<n;i++){
	        scanf("%d",&k);
	        if(k>0 && k<=n){
	            arr[k-1]=-1;
	        }
	    }
	    for(i=0;i<n;i++){
	        if(arr[i]==0){
	            printf("%d\n",i+1);
	            break;
	        }
	    }
	    if(i>=n)
	      printf("-1\n");
	}
	return 0;
}

ANOTHER:
int main() {
	int t;
	scanf("%d",&t);
	while(t--)
	{
	    int n,k;
	    scanf("%d",&n);
	    int i;
	    int arr[n];
	    for(i=0;i<n;i++)
	    scanf("%d",&arr[i]);
	    int count=0;
	    for(i=0;i<n;i++)
	    {
	        if(arr[i]>0)
	        arr[count++]=arr[i];
	    }
		
		
	   for(i=0;i<count;i++)
	    {
	        k=arr[i];
	        if(k<0)
	        k=0-k;
		if(k<=count && arr[k-1]>0)
	        arr[k-1]=0-arr[k-1];
	    }
	    
		
		 /*for(i=0;i<count;i++)
			 printf("%d ",arr[i]);*/
		
	    for(i=0;i<count;i++)
	    if(arr[i]>0)
	    break;
	    printf("%d\n",i+1);
	}
	return 0;
}

ANOTHER:
int main()
{
  int t;
  scanf("%d", &t);
  while (t--)
  {
    int n;
    scanf("%d", &n);
    int array[n];
    for (int i = 0; i < n; i++)
      scanf("%d", &array[i]);
    int val, nextVal;
    for (int i = 0; i < n; i++)
    {
      if (array[i] <= 0 || array[i] > n)
        continue;
      val = array[i];
      while (array[val - 1] != val)
      {
        nextVal = array[val - 1];
        array[val - 1] = val;
        val = nextVal;
        if (val <= 0 || val > n)
          break;
      }
    }
    int i;
    for ( i = 0; i < n; i++)
    {
      if (array[i] != i + 1)
      {
        break;
      }
    }
    i==n?printf("%d\n",array[n-1]+1):printf("%d\n",i+1);
  }
  
}


QUICK SORT:
long int partition(long int arr[],long int low,long int high)
{long int temp,i,j,pivot ;
   i=low ;
   pivot=arr[high] ;
   for(j=low;j<high;j++)
    { if(arr[j]<=pivot)
      { 
          temp=arr[i] ;
      
        arr[i]=arr[j] ;
         arr[j]=temp ;
         i++ ;
          
      }  }
      temp=arr[high] ;
      arr[high]=arr[i] ;
      arr[i]=temp ;
      return i ;
} 
void quicksort(long int arr[],long int low,long int high)
{long int k ;
    if(low<high)
   { k=partition(arr,low,high) ;
     quicksort(arr,low,k-1) ;
     quicksort(arr,k+1,high) ;
   } } 
   int main() 
   { long int i,t,arr[1000000],n,min ; 
     scanf("%ld",&t) ;
     while(t--)
     { scanf("%ld",&n) ;
       for(i=0;i<n;i++)
        scanf("%ld",&arr[i]) ;
        quicksort(arr,0,n-1) ; 
        min=1 ;
       for(i=0;i<n;i++)
       { if(arr[i]==min)
         min++ ; } 
         printf("%ld\n",min) ;
     } return 0 ; }
   
