Recently a security committee decided to enforce the following rules when 
an employee creates/changes his/her password.- 
The password must contain atleast one special character among # ! _ $ @-
The password must contain atleast two numbers- 
The password must contain atleast one upper case alphabet and one lower case alphabet.- 
The password must have a minimum length of 8.- The password must have a maximum length of 25
.The program must accept a given password string P as input and check for these rules and output VALID or INVALID.
Boundary Conditions:Length of P is from 2 to 50.
Input Format:First line will contain the string value of the password P
Output Format:VALID or INVALID based on the check performed by the program by applying the rules.
Example Input/Output:
Example 1:Input:
kiC_3b0x3r
Output:VALID
Example 2:Input:
m@d31nindia
Output:INVALID
Explanation:No alphabet in uppercase.
Example 3:Input:
M1kT!s0
Output:INVALID
Explanation:
Minimum length must be 8
Max Execution Time Limit: 5000 millisecs




mycode:
#include<stdio.h>
#include <stdlib.h>

int main()
{
 char s[100];
 scanf("%s",s);
 int u=0,l=0,n=0,sp=0,total=0,c,length=strlen(s);
 for(i=0;i<strlen(s);i++)
 {
     if(s[i]>='a' && s[i]<='z')
     l=1;
      if(s[i]>='A' && s[i]<='Z')
      u=1;
       if(s[i]>='0' && s[i]<='1')
       n++;
        if(s[i]=='#' || s[i]=='!' || s[i]=='_' || s[i]=='@')
        sp=1;
 }
 c=(n>=2)?1:0;
 total=u+l+sp+c;
 if(total==4 && (length>=8 && length<=25))
 printf("valid");
 else
 printf("invalid");
 }
 
 
 
 




code:(thanks to skillrack)
#include <stdio.h>
#include <regex.h>
int isValid(char *regex, char *inputpassword);
int main()
{ 
char input[50];
scanf("%s",input);
char REGEX_SPECIAL[20] = "[#!_$@]+";
char REGEX_NUMBERS[20] = ".*[0-9]+.*[0-9]+"; 
char REGEX_SMALLER[20] = "[a-z]+";
char REGEX_UPPER[20] = "[A-Z]+"; 
int len = strlen(input); 
int INVALID=0;
if(len < 8 || len > 25) 
{ 
INVALID=1;
} 
if(isInvalid(REGEX_SPECIAL,input)) 
{ 
INVALID=1; 
} 
if(isInvalid(REGEX_NUMBERS,input)) { INVALID=1; }
if(isInvalid(REGEX_SMALLER,input)) { INVALID=1; } 
if(isInvalid(REGEX_UPPER,input)) { INVALID=1; } 
if(INVALID) { printf("INVALID"); } 
else { printf("VALID"); 
}}
int isInvalid(char *REGEX, char *inputpassword)
{
regex_t reg; 
int regexcompileerror = regcomp(&reg, REGEX,REG_EXTENDED);
if(regexcompileerror)
{ 
printf("Error in regex.");
return 1; 
} 
if (regexec(&reg, inputpassword, 0, NULL, 0) == REG_NOMATCH)
{ 
return 1;
} 
else
{ 
//Valid as matching the criteria return 0;

}
}
