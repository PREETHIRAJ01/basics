code:
You have been given an alphanumeric string S, extract maximum numeric value from that string. 
Alphabets will only be in lower case.

Input:
The first line contains a single integer T i.e. the number of test cases.
 T testcases follow. The first and only line consists of a String S.

Output: 
For each testcase, in a new line, print the Maximum number extracted from the string S.

Constraints:
1 <= T <= 100
2 <= |S| <= 200

Example:
Input:
3
100klh564abc365bg
abvhd9sdnkjdfs
abchsd0sdhs
Output:
564
9
0

Explanation:
Test Case 1: The maximum number found in the string is "564".  

CODE:

execution time -->0.01 second

my idea--> 1. storing the given string in s[200]
           2. if current value is alphabet and the next value is a character then num[k++][j] (ie) k value increments
           3.if the current value is numeric then num[k][j++]
                (ie)num[0][0] num[0][1] num[0][2]
                     1         0         0
            4.after the value gets stored string needs to be ended using null character
                 num[k][j]='\0'
            5. after storing all the numbers in 2-D array
                num[0] 100
                num[1] 564
                num[2] 365 
            6. this for loop is for finding maximum
                   1) for(i=0;i<=k;i++)
                         {
                             n=0;
                    2) for(int h=0;h<strlen(num[i]);h++)
                           {
                         n=n*10+(int)(num[i][h]-48);
       
                              }
                        if(n>max)
                       {
                         max=n;
                        }
    
                        }
                        
                        1st for loop for storing 1-Darry of 2-D array(i.e)
                          num[0] num[1] num[2]
                          
                          2nd for loop for traversing along 1-D array
                             num[0][1] num[0][1] num[0][2]
                               1         0         0 
                               
                               n=n*10+(int)(num[0][j]-48)
                               
                               n=0*10+(int)(1)
                               n=1*10+(int)(0)
                               n=10*10+(int)(0)
  ----------------------------------------------------------------------------------------------------------------------------------------              
#include <stdio.h>
#include<string.h>

int main()
{
int t;
scanf("%d",&t);
char s[200];
while(t--)
{
scanf("%s",s);
char num[10][100];
int l=strlen(s);
int i,j=0,max=0,k=0,n;
for(i=0;i<l;i++)
{
    if(s[i]>='0' && s[i]<='9')
{
num[k][j++]=s[i];
}
num[k][j]='\0';
if((s[i]>='a' && s[i]<='z') &&(s[i+1]>='0' && s[i+1]<='9'))
{
num[k++][j];
j=0;
}
}
for(i=0;i<=k;i++)
{
    n=0;
    for(int h=0;h<strlen(num[i]);h++)
    {
       n=n*10+(int)(num[i][h]-48);
       
    }
    if(n>max)
    {
        max=n;
    }
    
}
printf("%d\n",max);
}
}


or

int main()
{
	int t;
	scanf("%d",&t);
	char s[200];
	while(t--)
	{
	    scanf("%s",s);
	    
	    int l=strlen(s);
	    int i,j=0,max=0,k=0,n=0;
	    for(i=0;i<l;i++)
	    {
	      if(s[i]>='0' && s[i]<='9')
	      {
	          n=n*10+(int)(s[i]-48);
	          if(n>max)
	          max=n;
	      }
	      else
	      {
	          n=0;
	      }
	    }
	     
	    printf("%d\n",max);
	    
	}
	return 0;
}
