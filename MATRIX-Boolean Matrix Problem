Given a boolean matrix mat[M][N] of size M X N, modify it such that if a matrix cell mat[i][j] is 1 (or true) then make all the cells of ith row and jth column as 1.

Input:
The first line of input contains an integer T denoting the number of test cases.
The first line of each test case is r and c, r is the number of rows and c is the number of columns.
The second line of each test case contains all the elements of the matrix in a single line separated by a single space.

Output:
Print the modified array.

Constraints:
1 ≤ T ≤ 100
1 ≤ r, c ≤ 1000
0 ≤ A[i][j] ≤ 1

Example:
Input:
3
2 2
1 0
0 0
2 3
0 0 0 
0 0 1
4 3
1 0 0
1 0 0
1 0 0
0 0 0

Output:
1 1
1 0
0 0 1 
1 1 1
1 1 1
1 1 1
1 0 0

Explanation:
Testcase1: Since only first element of matrix has 1 (at index 1,1) as value, so first row and first column are modified to 1.
 









CODE:(THIS IS NOT AN EFFICIENT CODE)
#include<stdio.h>

int changematrix(int n,int p1,int p2,int r,int c,int b[r][c])
{
    int i,j;
    for(i=0;i<r;i++)
    {
        for(j=0;j<c;j++)
        {
            if(i==p1 || j==p2)
            {
                b[i][j]=1;
            }
        }
    }
   
    
}


int main()
{
 int t;
 scanf("%d",&t);
 int r,c;
 while(t--)
 {
     scanf("%d%d",&r,&c);
     int a[r][c],b[r][c];
     int i,j;
     for(i=0;i<r;i++)
     {
         for(j=0;j<c;j++)
         {
             scanf("%d",&a[i][j]);
             b[i][j]=0;
         }
     }
     for(i=0;i<r;i++)
     {
         for(j=0;j<c;j++)
         {
             if(a[i][j]==1)
             {
                 changematrix(a[i][j],i,j,r,c,b);
             }
             if(a[i][j]==0)
             {
                 continue;
             }
         }
     }
      for(i=0;i<r;i++)
     {
         for(j=0;j<c;j++)
         {
             printf("%d ",b[i][j]);
         }
         printf("\n");
     }
     
 }
}


EFFICIENT CODE:(THANKS TO GEEKS FOR GEEKS FOR THIS EFFICIENT SOLUTION)
1) Create two temporary arrays row[M] and col[N]. Initialize all values of row[] and col[] as 0.
2) Traverse the input matrix mat[M][N]. If you see an entry mat[i][j] as true, then mark row[i] and col[j] as true.
3) Traverse the input matrix mat[M][N] again. For each entry mat[i][j], check the values of row[i] and col[j].
If any of the two values (row[i] or col[j]) is true, then mark mat[i][j] as true.



#include<stdio.h>

 


int main()
{
 int t;
 scanf("%d",&t);
 int r,c;
 while(t--)
 {
     scanf("%d%d",&r,&c);
     int a[r][c];
     int i,j;
     int row[r],col[c];
     for(i=0;i<r;i++)
     {
         for(j=0;j<c;j++)
         {
             scanf("%d",&a[i][j]);
             
         }
     }
     for(i=0;i<r;i++)
     {
         row[i]=0;
     }
      for(i=0;i<c;i++)
      {
         col[i]=0;
      }
     for(i=0;i<r;i++)
     {
         for(j=0;j<c;j++)
         {
             if(a[i][j]==1)
             {
                 row[i]=1;
                 col[j]=1;
             }
             
         }
     }
     for(i=0;i<r;i++)
     {
         for(j=0;j<c;j++)
         {
             if(row[i]==1 || col[j]==1 )
             {
                printf("1 ");
                
             }
             else
             {
                 printf("0 ");
             }
             
         }
         printf("\n");
     }
     
 }
}

