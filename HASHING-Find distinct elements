Given a N x N matrix. Write a program to find count of all the distinct elements common to all rows of the matrix. 
Print count of such elements.

Input:
First line of input contains a single integer T which denotes the number of test cases.
T test cases follows. First line of each test case contains a single integer N which denotes
the dimension of matrix. Second line of each test case contains N*N space separated integers which denotes elements of the matrix.

Output:
For each test case, print count of all the distinct elements common to all rows of the matrix.

Constraints:
1 <= T <= 100
1 <= N <= 1000

Example:
Input:
2
4
2 1 4 3 1 2 3 2 3 6 2 3 5 2 5 3
5
12 1 14 3 16 14 2 1 3 35 14 1 14 3 11 14 25 3 2 1 1 18 3 21 14

Output:
2
3


code:(0.01 SEC)
#include <stdio.h>

int main() 
{
     int t;
     scanf("%d",&t);
     int n;
     while(t--)
     {
         scanf("%d",&n);
         int i,j;
         int a[n][n],max=0;
         for(i=0;i<n;i++)
         {
             for(j=0;j<n;j++)
             {
             scanf("%d",&a[i][j]);
             if(a[i][j]>max)
             max=a[i][j];
             }
         }
         int k=1;
         int f[1000]={0};
         for(i=0;i<n;i++)
         {
             for(j=0;j<n;j++)
             {
             
                int count=0;
                if(k-1 == f[a[i][j]])
                 {
                     f[a[i][j]]=k;
                 }
             }
             
             k++;
             
         }
         int c=0;
         for(i=0;i<=max;i++)
         {
             if(f[i]==n)
             {
                 c++;
             }
         }
             printf("%d\n",c);
         
         
         
     }
	return 0;
}







ANOTHER METHOD:
int findCount(int n, int** a){
    int count[1000]={0};
    int distinct=0;
    
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(count[a[i][j]]==i){
                //printf("aij: %d ",a[i][j]);
                count[a[i][j]]++;
            }
        }
    }
    
    for(int k=0;k<1000;k++){
        if(count[k]==n){
            //printf("%d %d ",k,n);
            distinct++;
        }
    }
    return distinct;
}
int main() {
	//code
	int t,n,i,j;
	int count=0;
	//int a[1000][1000];
	int **a;

  /* obtain values for rows & cols */

  /* allocate the array */
 
	scanf("%d",&t);
	while(t--){
	    count=0;
	    scanf("%d",&n);
	    
	     a = malloc(n * sizeof(*a));
  for (i=0; i<n; i++)
  {
    a[i] = malloc(n * sizeof(*a[i]));
  }
  for(i=0;i<n;i++){
	        for(j=0;j<n;j++){
	            scanf("%d",&a[i][j]);
	        }
	    }
	    
	    count = findCount(n,a);
	    printf("%d\n",count);
	}
	
	return 0;
}


3:

int main() {
    int t,n,ele,i;
	scanf("%d",&t);
	while(t--)
	{
	    int ar[1001]={0},count=0,j;
	    scanf("%d",&n);
	    for(i=1;i<=n;i++)
	       {
	           for(j=1;j<=n;j++)
	           {
	               scanf("%d",&ele);
	               if(i-ar[ele]==1)
	                    ar[ele]=i;
	           }
	       }
	   for(i=0;i<=1000;i++)
	   {
	       if(ar[i]==n)
	            count++;
	   }
	    printf("%d\n",count);
	}
	return 0;
}
